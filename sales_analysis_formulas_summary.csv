Metric,Description,Pandas Formula,SQL Formula,Excel Formula
Monthly Revenue by MainChannel,Sum of revenue grouped by month and main channel,"df.groupby(['Month','MainChannel'])['GrossAfterCb'].sum().reset_index()","SELECT DATE_TRUNC('month', SaleDate) AS Month, MainChannel, SUM(GrossAfterCb) AS Revenue FROM sales GROUP BY 1,2;","PivotTable: Rows=Month, Columns=MainChannel, Values=Sum(GrossAfterCb)"
Quarterly Revenue,Sum of revenue per fiscal quarter,df.groupby(df['SaleDate'].dt.to_period('Q'))['GrossAfterCb'].sum().reset_index(),"SELECT DATE_TRUNC('quarter', SaleDate) AS Quarter, SUM(GrossAfterCb) FROM sales GROUP BY 1;",PivotTable grouped by Quarter
Top Products by Revenue,Top N products ranked by total revenue,df.groupby('Product')['GrossAfterCb'].sum().sort_values(ascending=False).head(10),"SELECT Product, SUM(GrossAfterCb) FROM sales GROUP BY Product ORDER BY 2 DESC LIMIT 10;","PivotTable: Rows=Product, Values=Sum(GrossAfterCb), Sort Descending"
Sales Rep Performance,Sum of revenue by each sales representative,df.groupby('SalesRep')['GrossAfterCb'].sum().reset_index(),"SELECT SalesRep, SUM(GrossAfterCb) AS TotalSales FROM sales GROUP BY SalesRep;","PivotTable: Rows=SalesRep, Values=Sum(GrossAfterCb)"
Average Commission per Sale,Total commission divided by number of sales,df['CallCommission'].sum() / df.shape[0],SELECT SUM(CallCommission)/COUNT(*) FROM sales;,SUM(Commission)/COUNT(Sales)
Month with Highest Sales,Month with maximum total revenue,monthly = df.groupby(df['SaleDate'].dt.to_period('M'))['GrossAfterCb'].sum(); monthly.idxmax(),"WITH m AS (SELECT DATE_TRUNC('month', SaleDate) AS m, SUM(GrossAfterCb) AS rev FROM sales GROUP BY 1) SELECT m, rev FROM m ORDER BY rev DESC LIMIT 1;","PivotTable month totals, then MAX()"
Underperforming Channels,Channels below a given percentile of total revenue,threshold = df.groupby('MainChannel')['GrossAfterCb'].sum().quantile(0.2),"SELECT MainChannel, SUM(GrossAfterCb) FROM sales GROUP BY MainChannel HAVING SUM(GrossAfterCb) < threshold;",Filter channels below 20th percentile
Year-over-Year Growth by Region,Yearly revenue growth % by region,"agg = df.groupby(['Region','Year'])['GrossAfterCb'].sum().reset_index(); agg['YoY'] = agg.groupby('Region')['GrossAfterCb'].pct_change()","WITH t AS (SELECT Region, EXTRACT(YEAR FROM SaleDate) AS yr, SUM(GrossAfterCb) AS rev FROM sales GROUP BY Region, yr) SELECT t1.Region, t1.yr, (t1.rev - t2.rev)/t2.rev FROM t t1 LEFT JOIN t t2 ON t1.Region=t2.Region AND t1.yr=t2.yr+1;","PivotTable Region x Year, add YoY % formula"
Average Order Value (AOV),Average revenue per unique order,df['GrossAfterCb'].sum() / df['OrderUnitKey'].nunique(),SELECT SUM(GrossAfterCb)/COUNT(DISTINCT OrderUnitKey) AS AOV FROM sales;,SUM(GrossAfterCb)/COUNTUNIQUE(OrderUnitKey)
Profit Margin,Profit divided by revenue,df['Profit'].sum() / df['GrossAfterCb'].sum(),SELECT SUM(Profit)/SUM(GrossAfterCb) FROM sales;,SUM(Profit)/SUM(GrossAfterCb)
Month-over-Month Growth,Revenue growth compared to previous month per channel,monthly['MoM'] = monthly.groupby('MainChannel')['GrossAfterCb'].pct_change(),"SELECT m, MainChannel, (rev - LAG(rev) OVER (PARTITION BY MainChannel ORDER BY m))/LAG(rev) OVER (...) FROM monthly;",(Current - Previous)/Previous
Anomaly Detection,Detect outliers using z-score threshold,df['z'] = (df['GrossAfterCb'] - df['GrossAfterCb'].mean()) / df['GrossAfterCb'].std(); df[abs(df['z']) > 3],SELECT * FROM sales WHERE ABS((GrossAfterCb - mean)/std) > 3;,=(cell - mean)/stdev > 3
Conversion Rate,Orders divided by visits or sessions,df['Orders'].sum() / df['Visits'].sum(),SELECT SUM(Orders)/SUM(Visits) FROM sales;,SUM(Orders)/SUM(Visits)
KPI Summary,"Compute key performance indicators (Revenue, Profit, AOV, YoY)",Use sums and pct_change across years for revenue/profit/AOV,Aggregate SUM() by year and compare consecutive years,Summary table or dashboard combining key metrics
Profit by Channel,Sum of profit grouped by MainChannel,df.groupby('MainChannel')['Profit'].sum().reset_index(),"SELECT MainChannel, SUM(Profit) FROM sales GROUP BY MainChannel;","PivotTable: Rows=Channel, Values=Sum(Profit)"
Top Regions by Sales,Top N regions ranked by total revenue,df.groupby('Region')['GrossAfterCb'].sum().sort_values(ascending=False).head(10),"SELECT Region, SUM(GrossAfterCb) FROM sales GROUP BY Region ORDER BY 2 DESC LIMIT 10;","PivotTable: Rows=Region, Sort Descending"
Product Share %,Each product's % contribution to total revenue,(df.groupby('Product')['GrossAfterCb'].sum() / df['GrossAfterCb'].sum()) * 100,"SELECT Product, SUM(GrossAfterCb)*100/(SELECT SUM(GrossAfterCb) FROM sales) AS pct FROM sales GROUP BY Product;",=(ProductTotal/GrandTotal)*100
Channel Contribution %,Each channelâ€™s % of total revenue,(df.groupby('MainChannel')['GrossAfterCb'].sum() / df['GrossAfterCb'].sum()) * 100,"SELECT MainChannel, SUM(GrossAfterCb)*100/(SELECT SUM(GrossAfterCb) FROM sales) FROM sales GROUP BY MainChannel;",=(ChannelTotal/GrandTotal)*100
Customer Lifetime Value,Average revenue per customer across all transactions,df.groupby('CustomerID')['GrossAfterCb'].sum().mean(),"SELECT AVG(t.rev) FROM (SELECT CustomerID, SUM(GrossAfterCb) AS rev FROM sales GROUP BY CustomerID) t;","AVERAGEIFS(SUMIFS(Revenue,Customer,uniqueID))"
