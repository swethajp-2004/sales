{"messages": [{"role": "user", "content": "Show monthly revenue by MainChannel."}, {"role": "assistant", "content": "Group by SaleDate (month) and MainChannel, then sum GrossAfterCb. Pandas: df.groupby(['Month','MainChannel'])['GrossAfterCb'].sum().reset_index(). SQL: SELECT DATE_TRUNC('month', SaleDate) AS Month, MainChannel, SUM(GrossAfterCb) FROM sales GROUP BY 1,2;"}]}
{"messages": [{"role": "user", "content": "List top 10 packages with the highest profit."}, {"role": "assistant", "content": "Group by Package and sum Profit, then sort descending and take top 10. Pandas: df.groupby('Package')['Profit'].sum().sort_values(ascending=False).head(10). SQL: SELECT Package, SUM(Profit) AS TotalProfit FROM sales GROUP BY Package ORDER BY TotalProfit DESC LIMIT 10;"}]}
{"messages": [{"role": "user", "content": "Compare revenue between Online and Retail channels."}, {"role": "assistant", "content": "Group by MainChannel and sum GrossAfterCb, then compare totals. Pandas: df.groupby('MainChannel')['GrossAfterCb'].sum(). SQL: SELECT MainChannel, SUM(GrossAfterCb) FROM sales GROUP BY MainChannel;"}]}
{"messages": [{"role": "user", "content": "Calculate year-over-year growth by region."}, {"role": "assistant", "content": "Group by Region and Year, sum GrossAfterCb, then compute percentage change. Pandas: df.groupby(['Region','Year'])['GrossAfterCb'].sum().pct_change(). SQL: SELECT Region, EXTRACT(YEAR FROM SaleDate) AS Year, SUM(GrossAfterCb) AS Revenue FROM sales GROUP BY 1,2;"}]}
{"messages": [{"role": "user", "content": "Compute profit margin by MainChannel."}, {"role": "assistant", "content": "Use SUM(Profit)/SUM(GrossAfterCb). Pandas: df.groupby('MainChannel').apply(lambda x: x['Profit'].sum()/x['GrossAfterCb'].sum()). SQL: SELECT MainChannel, SUM(Profit)/SUM(GrossAfterCb) AS ProfitMargin FROM sales GROUP BY MainChannel;"}]}
{"messages": [{"role": "user", "content": "Find average order value."}, {"role": "assistant", "content": "Divide total revenue by number of unique orders. Pandas: df['GrossAfterCb'].sum()/df['OrderUnitKey'].nunique(). SQL: SELECT SUM(GrossAfterCb)/COUNT(DISTINCT OrderUnitKey) FROM sales;"}]}
{"messages": [{"role": "user", "content": "Show quarterly revenue trend."}, {"role": "assistant", "content": "Group by SaleDate quarter, sum GrossAfterCb. Pandas: df.groupby(df['SaleDate'].dt.to_period('Q'))['GrossAfterCb'].sum(). SQL: SELECT DATE_TRUNC('quarter', SaleDate), SUM(GrossAfterCb) FROM sales GROUP BY 1;"}]}
{"messages": [{"role": "user", "content": "Identify underperforming channels."}, {"role": "assistant", "content": "Find channels with revenue below average. Pandas: df.groupby('MainChannel')['GrossAfterCb'].sum().query('GrossAfterCb < GrossAfterCb.mean()'). SQL: SELECT MainChannel, SUM(GrossAfterCb) FROM sales GROUP BY MainChannel HAVING SUM(GrossAfterCb) < (SELECT AVG(SUM(GrossAfterCb)) FROM sales GROUP BY MainChannel);"}]}
{"messages": [{"role": "user", "content": "Find month with highest revenue."}, {"role": "assistant", "content": "Group by month, sum GrossAfterCb, pick the max. Pandas: df.groupby(df['SaleDate'].dt.to_period('M'))['GrossAfterCb'].sum().idxmax(). SQL: SELECT DATE_TRUNC('month', SaleDate), SUM(GrossAfterCb) FROM sales GROUP BY 1 ORDER BY 2 DESC LIMIT 1;"}]}
{"messages": [{"role": "user", "content": "Show monthly revenue by MainChannel."}, {"role": "assistant", "content": "Group by SaleDate (month) and MainChannel, then sum GrossAfterCb. Pandas: df.groupby(['Month','MainChannel'])['GrossAfterCb'].sum().reset_index(). SQL: SELECT DATE_TRUNC('month', SaleDate) AS Month, MainChannel, SUM(GrossAfterCb) FROM sales GROUP BY 1,2;"}]}
{"messages": [{"role": "user", "content": "List top 10 packages with the highest profit."}, {"role": "assistant", "content": "Group by Package and sum Profit, then sort descending and take top 10. Pandas: df.groupby('Package')['Profit'].sum().sort_values(ascending=False).head(10). SQL: SELECT Package, SUM(Profit) AS TotalProfit FROM sales GROUP BY Package ORDER BY TotalProfit DESC LIMIT 10;"}]}
{"messages": [{"role": "user", "content": "Compare revenue between Online and Retail channels."}, {"role": "assistant", "content": "Group by MainChannel and sum GrossAfterCb, then compare totals. Pandas: df.groupby('MainChannel')['GrossAfterCb'].sum(). SQL: SELECT MainChannel, SUM(GrossAfterCb) FROM sales GROUP BY MainChannel;"}]}
{"messages": [{"role": "user", "content": "Calculate year-over-year growth by region."}, {"role": "assistant", "content": "Group by Region and Year, sum GrossAfterCb, then compute percentage change. Pandas: df.groupby(['Region','Year'])['GrossAfterCb'].sum().pct_change(). SQL: SELECT Region, EXTRACT(YEAR FROM SaleDate) AS Year, SUM(GrossAfterCb) AS Revenue FROM sales GROUP BY 1,2;"}]}
{"messages": [{"role": "user", "content": "Compute profit margin by MainChannel."}, {"role": "assistant", "content": "Use SUM(Profit)/SUM(GrossAfterCb). Pandas: df.groupby('MainChannel').apply(lambda x: x['Profit'].sum()/x['GrossAfterCb'].sum()). SQL: SELECT MainChannel, SUM(Profit)/SUM(GrossAfterCb) AS ProfitMargin FROM sales GROUP BY MainChannel;"}]}
{"messages": [{"role": "user", "content": "Find average order value."}, {"role": "assistant", "content": "Divide total revenue by number of unique orders. Pandas: df['GrossAfterCb'].sum()/df['OrderUnitKey'].nunique(). SQL: SELECT SUM(GrossAfterCb)/COUNT(DISTINCT OrderUnitKey) FROM sales;"}]}
{"messages": [{"role": "user", "content": "Show quarterly revenue trend."}, {"role": "assistant", "content": "Group by SaleDate quarter, sum GrossAfterCb. Pandas: df.groupby(df['SaleDate'].dt.to_period('Q'))['GrossAfterCb'].sum(). SQL: SELECT DATE_TRUNC('quarter', SaleDate), SUM(GrossAfterCb) FROM sales GROUP BY 1;"}]}
{"messages": [{"role": "user", "content": "Identify underperforming channels."}, {"role": "assistant", "content": "Find channels with revenue below average. Pandas: df.groupby('MainChannel')['GrossAfterCb'].sum().query('GrossAfterCb < GrossAfterCb.mean()'). SQL: SELECT MainChannel, SUM(GrossAfterCb) FROM sales GROUP BY MainChannel HAVING SUM(GrossAfterCb) < (SELECT AVG(SUM(GrossAfterCb)) FROM sales GROUP BY MainChannel);"}]}
{"messages": [{"role": "user", "content": "Find month with highest revenue."}, {"role": "assistant", "content": "Group by month, sum GrossAfterCb, pick the max. Pandas: df.groupby(df['SaleDate'].dt.to_period('M'))['GrossAfterCb'].sum().idxmax(). SQL: SELECT DATE_TRUNC('month', SaleDate), SUM(GrossAfterCb) FROM sales GROUP BY 1 ORDER BY 2 DESC LIMIT 1;"}]}
{"messages": [{"role": "user", "content": "Show monthly revenue by MainChannel."}, {"role": "assistant", "content": "Group by SaleDate (month) and MainChannel, then sum GrossAfterCb. Pandas: df.groupby(['Month','MainChannel'])['GrossAfterCb'].sum().reset_index(). SQL: SELECT DATE_TRUNC('month', SaleDate) AS Month, MainChannel, SUM(GrossAfterCb) FROM sales GROUP BY 1,2;"}]}
{"messages": [{"role": "user", "content": "List top 10 packages with the highest profit."}, {"role": "assistant", "content": "Group by Package and sum Profit, then sort descending and take top 10. Pandas: df.groupby('Package')['Profit'].sum().sort_values(ascending=False).head(10). SQL: SELECT Package, SUM(Profit) AS TotalProfit FROM sales GROUP BY Package ORDER BY TotalProfit DESC LIMIT 10;"}]}
{"messages": [{"role": "user", "content": "Compare revenue between Online and Retail channels."}, {"role": "assistant", "content": "Group by MainChannel and sum GrossAfterCb, then compare totals. Pandas: df.groupby('MainChannel')['GrossAfterCb'].sum(). SQL: SELECT MainChannel, SUM(GrossAfterCb) FROM sales GROUP BY MainChannel;"}]}
{"messages": [{"role": "user", "content": "Calculate year-over-year growth by region."}, {"role": "assistant", "content": "Group by Region and Year, sum GrossAfterCb, then compute percentage change. Pandas: df.groupby(['Region','Year'])['GrossAfterCb'].sum().pct_change(). SQL: SELECT Region, EXTRACT(YEAR FROM SaleDate) AS Year, SUM(GrossAfterCb) AS Revenue FROM sales GROUP BY 1,2;"}]}
{"messages": [{"role": "user", "content": "Compute profit margin by MainChannel."}, {"role": "assistant", "content": "Use SUM(Profit)/SUM(GrossAfterCb). Pandas: df.groupby('MainChannel').apply(lambda x: x['Profit'].sum()/x['GrossAfterCb'].sum()). SQL: SELECT MainChannel, SUM(Profit)/SUM(GrossAfterCb) AS ProfitMargin FROM sales GROUP BY MainChannel;"}]}
{"messages": [{"role": "user", "content": "Find average order value."}, {"role": "assistant", "content": "Divide total revenue by number of unique orders. Pandas: df['GrossAfterCb'].sum()/df['OrderUnitKey'].nunique(). SQL: SELECT SUM(GrossAfterCb)/COUNT(DISTINCT OrderUnitKey) FROM sales;"}]}
{"messages": [{"role": "user", "content": "Show quarterly revenue trend."}, {"role": "assistant", "content": "Group by SaleDate quarter, sum GrossAfterCb. Pandas: df.groupby(df['SaleDate'].dt.to_period('Q'))['GrossAfterCb'].sum(). SQL: SELECT DATE_TRUNC('quarter', SaleDate), SUM(GrossAfterCb) FROM sales GROUP BY 1;"}]}
{"messages": [{"role": "user", "content": "Identify underperforming channels."}, {"role": "assistant", "content": "Find channels with revenue below average. Pandas: df.groupby('MainChannel')['GrossAfterCb'].sum().query('GrossAfterCb < GrossAfterCb.mean()'). SQL: SELECT MainChannel, SUM(GrossAfterCb) FROM sales GROUP BY MainChannel HAVING SUM(GrossAfterCb) < (SELECT AVG(SUM(GrossAfterCb)) FROM sales GROUP BY MainChannel);"}]}
{"messages": [{"role": "user", "content": "Find month with highest revenue."}, {"role": "assistant", "content": "Group by month, sum GrossAfterCb, pick the max. Pandas: df.groupby(df['SaleDate'].dt.to_period('M'))['GrossAfterCb'].sum().idxmax(). SQL: SELECT DATE_TRUNC('month', SaleDate), SUM(GrossAfterCb) FROM sales GROUP BY 1 ORDER BY 2 DESC LIMIT 1;"}]}
{"messages": [{"role": "user", "content": "Show monthly revenue by MainChannel."}, {"role": "assistant", "content": "Group by SaleDate (month) and MainChannel, then sum GrossAfterCb. Pandas: df.groupby(['Month','MainChannel'])['GrossAfterCb'].sum().reset_index(). SQL: SELECT DATE_TRUNC('month', SaleDate) AS Month, MainChannel, SUM(GrossAfterCb) FROM sales GROUP BY 1,2;"}]}
{"messages": [{"role": "user", "content": "List top 10 packages with the highest profit."}, {"role": "assistant", "content": "Group by Package and sum Profit, then sort descending and take top 10. Pandas: df.groupby('Package')['Profit'].sum().sort_values(ascending=False).head(10). SQL: SELECT Package, SUM(Profit) AS TotalProfit FROM sales GROUP BY Package ORDER BY TotalProfit DESC LIMIT 10;"}]}
{"messages": [{"role": "user", "content": "Compare revenue between Online and Retail channels."}, {"role": "assistant", "content": "Group by MainChannel and sum GrossAfterCb, then compare totals. Pandas: df.groupby('MainChannel')['GrossAfterCb'].sum(). SQL: SELECT MainChannel, SUM(GrossAfterCb) FROM sales GROUP BY MainChannel;"}]}
{"messages": [{"role": "user", "content": "Calculate year-over-year growth by region."}, {"role": "assistant", "content": "Group by Region and Year, sum GrossAfterCb, then compute percentage change. Pandas: df.groupby(['Region','Year'])['GrossAfterCb'].sum().pct_change(). SQL: SELECT Region, EXTRACT(YEAR FROM SaleDate) AS Year, SUM(GrossAfterCb) AS Revenue FROM sales GROUP BY 1,2;"}]}
{"messages": [{"role": "user", "content": "Compute profit margin by MainChannel."}, {"role": "assistant", "content": "Use SUM(Profit)/SUM(GrossAfterCb). Pandas: df.groupby('MainChannel').apply(lambda x: x['Profit'].sum()/x['GrossAfterCb'].sum()). SQL: SELECT MainChannel, SUM(Profit)/SUM(GrossAfterCb) AS ProfitMargin FROM sales GROUP BY MainChannel;"}]}
{"messages": [{"role": "user", "content": "Find average order value."}, {"role": "assistant", "content": "Divide total revenue by number of unique orders. Pandas: df['GrossAfterCb'].sum()/df['OrderUnitKey'].nunique(). SQL: SELECT SUM(GrossAfterCb)/COUNT(DISTINCT OrderUnitKey) FROM sales;"}]}
{"messages": [{"role": "user", "content": "Show quarterly revenue trend."}, {"role": "assistant", "content": "Group by SaleDate quarter, sum GrossAfterCb. Pandas: df.groupby(df['SaleDate'].dt.to_period('Q'))['GrossAfterCb'].sum(). SQL: SELECT DATE_TRUNC('quarter', SaleDate), SUM(GrossAfterCb) FROM sales GROUP BY 1;"}]}
{"messages": [{"role": "user", "content": "Identify underperforming channels."}, {"role": "assistant", "content": "Find channels with revenue below average. Pandas: df.groupby('MainChannel')['GrossAfterCb'].sum().query('GrossAfterCb < GrossAfterCb.mean()'). SQL: SELECT MainChannel, SUM(GrossAfterCb) FROM sales GROUP BY MainChannel HAVING SUM(GrossAfterCb) < (SELECT AVG(SUM(GrossAfterCb)) FROM sales GROUP BY MainChannel);"}]}
{"messages": [{"role": "user", "content": "Find month with highest revenue."}, {"role": "assistant", "content": "Group by month, sum GrossAfterCb, pick the max. Pandas: df.groupby(df['SaleDate'].dt.to_period('M'))['GrossAfterCb'].sum().idxmax(). SQL: SELECT DATE_TRUNC('month', SaleDate), SUM(GrossAfterCb) FROM sales GROUP BY 1 ORDER BY 2 DESC LIMIT 1;"}]}
{"messages": [{"role": "user", "content": "Show monthly revenue by MainChannel."}, {"role": "assistant", "content": "Group by SaleDate (month) and MainChannel, then sum GrossAfterCb. Pandas: df.groupby(['Month','MainChannel'])['GrossAfterCb'].sum().reset_index(). SQL: SELECT DATE_TRUNC('month', SaleDate) AS Month, MainChannel, SUM(GrossAfterCb) FROM sales GROUP BY 1,2;"}]}
{"messages": [{"role": "user", "content": "List top 10 packages with the highest profit."}, {"role": "assistant", "content": "Group by Package and sum Profit, then sort descending and take top 10. Pandas: df.groupby('Package')['Profit'].sum().sort_values(ascending=False).head(10). SQL: SELECT Package, SUM(Profit) AS TotalProfit FROM sales GROUP BY Package ORDER BY TotalProfit DESC LIMIT 10;"}]}
{"messages": [{"role": "user", "content": "Compare revenue between Online and Retail channels."}, {"role": "assistant", "content": "Group by MainChannel and sum GrossAfterCb, then compare totals. Pandas: df.groupby('MainChannel')['GrossAfterCb'].sum(). SQL: SELECT MainChannel, SUM(GrossAfterCb) FROM sales GROUP BY MainChannel;"}]}
{"messages": [{"role": "user", "content": "Calculate year-over-year growth by region."}, {"role": "assistant", "content": "Group by Region and Year, sum GrossAfterCb, then compute percentage change. Pandas: df.groupby(['Region','Year'])['GrossAfterCb'].sum().pct_change(). SQL: SELECT Region, EXTRACT(YEAR FROM SaleDate) AS Year, SUM(GrossAfterCb) AS Revenue FROM sales GROUP BY 1,2;"}]}
{"messages": [{"role": "user", "content": "Compute profit margin by MainChannel."}, {"role": "assistant", "content": "Use SUM(Profit)/SUM(GrossAfterCb). Pandas: df.groupby('MainChannel').apply(lambda x: x['Profit'].sum()/x['GrossAfterCb'].sum()). SQL: SELECT MainChannel, SUM(Profit)/SUM(GrossAfterCb) AS ProfitMargin FROM sales GROUP BY MainChannel;"}]}
{"messages": [{"role": "user", "content": "Find average order value."}, {"role": "assistant", "content": "Divide total revenue by number of unique orders. Pandas: df['GrossAfterCb'].sum()/df['OrderUnitKey'].nunique(). SQL: SELECT SUM(GrossAfterCb)/COUNT(DISTINCT OrderUnitKey) FROM sales;"}]}
{"messages": [{"role": "user", "content": "Show quarterly revenue trend."}, {"role": "assistant", "content": "Group by SaleDate quarter, sum GrossAfterCb. Pandas: df.groupby(df['SaleDate'].dt.to_period('Q'))['GrossAfterCb'].sum(). SQL: SELECT DATE_TRUNC('quarter', SaleDate), SUM(GrossAfterCb) FROM sales GROUP BY 1;"}]}
{"messages": [{"role": "user", "content": "Identify underperforming channels."}, {"role": "assistant", "content": "Find channels with revenue below average. Pandas: df.groupby('MainChannel')['GrossAfterCb'].sum().query('GrossAfterCb < GrossAfterCb.mean()'). SQL: SELECT MainChannel, SUM(GrossAfterCb) FROM sales GROUP BY MainChannel HAVING SUM(GrossAfterCb) < (SELECT AVG(SUM(GrossAfterCb)) FROM sales GROUP BY MainChannel);"}]}
{"messages": [{"role": "user", "content": "Find month with highest revenue."}, {"role": "assistant", "content": "Group by month, sum GrossAfterCb, pick the max. Pandas: df.groupby(df['SaleDate'].dt.to_period('M'))['GrossAfterCb'].sum().idxmax(). SQL: SELECT DATE_TRUNC('month', SaleDate), SUM(GrossAfterCb) FROM sales GROUP BY 1 ORDER BY 2 DESC LIMIT 1;"}]}
{"messages": [{"role": "user", "content": "Show monthly revenue by MainChannel."}, {"role": "assistant", "content": "Group by SaleDate (month) and MainChannel, then sum GrossAfterCb. Pandas: df.groupby(['Month','MainChannel'])['GrossAfterCb'].sum().reset_index(). SQL: SELECT DATE_TRUNC('month', SaleDate) AS Month, MainChannel, SUM(GrossAfterCb) FROM sales GROUP BY 1,2;"}]}
{"messages": [{"role": "user", "content": "List top 10 packages with the highest profit."}, {"role": "assistant", "content": "Group by Package and sum Profit, then sort descending and take top 10. Pandas: df.groupby('Package')['Profit'].sum().sort_values(ascending=False).head(10). SQL: SELECT Package, SUM(Profit) AS TotalProfit FROM sales GROUP BY Package ORDER BY TotalProfit DESC LIMIT 10;"}]}
{"messages": [{"role": "user", "content": "Compare revenue between Online and Retail channels."}, {"role": "assistant", "content": "Group by MainChannel and sum GrossAfterCb, then compare totals. Pandas: df.groupby('MainChannel')['GrossAfterCb'].sum(). SQL: SELECT MainChannel, SUM(GrossAfterCb) FROM sales GROUP BY MainChannel;"}]}
{"messages": [{"role": "user", "content": "Calculate year-over-year growth by region."}, {"role": "assistant", "content": "Group by Region and Year, sum GrossAfterCb, then compute percentage change. Pandas: df.groupby(['Region','Year'])['GrossAfterCb'].sum().pct_change(). SQL: SELECT Region, EXTRACT(YEAR FROM SaleDate) AS Year, SUM(GrossAfterCb) AS Revenue FROM sales GROUP BY 1,2;"}]}
{"messages": [{"role": "user", "content": "Compute profit margin by MainChannel."}, {"role": "assistant", "content": "Use SUM(Profit)/SUM(GrossAfterCb). Pandas: df.groupby('MainChannel').apply(lambda x: x['Profit'].sum()/x['GrossAfterCb'].sum()). SQL: SELECT MainChannel, SUM(Profit)/SUM(GrossAfterCb) AS ProfitMargin FROM sales GROUP BY MainChannel;"}]}
{"messages": [{"role": "user", "content": "Find average order value."}, {"role": "assistant", "content": "Divide total revenue by number of unique orders. Pandas: df['GrossAfterCb'].sum()/df['OrderUnitKey'].nunique(). SQL: SELECT SUM(GrossAfterCb)/COUNT(DISTINCT OrderUnitKey) FROM sales;"}]}
{"messages": [{"role": "user", "content": "Show quarterly revenue trend."}, {"role": "assistant", "content": "Group by SaleDate quarter, sum GrossAfterCb. Pandas: df.groupby(df['SaleDate'].dt.to_period('Q'))['GrossAfterCb'].sum(). SQL: SELECT DATE_TRUNC('quarter', SaleDate), SUM(GrossAfterCb) FROM sales GROUP BY 1;"}]}
{"messages": [{"role": "user", "content": "Identify underperforming channels."}, {"role": "assistant", "content": "Find channels with revenue below average. Pandas: df.groupby('MainChannel')['GrossAfterCb'].sum().query('GrossAfterCb < GrossAfterCb.mean()'). SQL: SELECT MainChannel, SUM(GrossAfterCb) FROM sales GROUP BY MainChannel HAVING SUM(GrossAfterCb) < (SELECT AVG(SUM(GrossAfterCb)) FROM sales GROUP BY MainChannel);"}]}
{"messages": [{"role": "user", "content": "Find month with highest revenue."}, {"role": "assistant", "content": "Group by month, sum GrossAfterCb, pick the max. Pandas: df.groupby(df['SaleDate'].dt.to_period('M'))['GrossAfterCb'].sum().idxmax(). SQL: SELECT DATE_TRUNC('month', SaleDate), SUM(GrossAfterCb) FROM sales GROUP BY 1 ORDER BY 2 DESC LIMIT 1;"}]}
{"messages": [{"role": "user", "content": "Show monthly revenue by MainChannel."}, {"role": "assistant", "content": "Group by SaleDate (month) and MainChannel, then sum GrossAfterCb. Pandas: df.groupby(['Month','MainChannel'])['GrossAfterCb'].sum().reset_index(). SQL: SELECT DATE_TRUNC('month', SaleDate) AS Month, MainChannel, SUM(GrossAfterCb) FROM sales GROUP BY 1,2;"}]}
{"messages": [{"role": "user", "content": "List top 10 packages with the highest profit."}, {"role": "assistant", "content": "Group by Package and sum Profit, then sort descending and take top 10. Pandas: df.groupby('Package')['Profit'].sum().sort_values(ascending=False).head(10). SQL: SELECT Package, SUM(Profit) AS TotalProfit FROM sales GROUP BY Package ORDER BY TotalProfit DESC LIMIT 10;"}]}
{"messages": [{"role": "user", "content": "Compare revenue between Online and Retail channels."}, {"role": "assistant", "content": "Group by MainChannel and sum GrossAfterCb, then compare totals. Pandas: df.groupby('MainChannel')['GrossAfterCb'].sum(). SQL: SELECT MainChannel, SUM(GrossAfterCb) FROM sales GROUP BY MainChannel;"}]}
{"messages": [{"role": "user", "content": "Calculate year-over-year growth by region."}, {"role": "assistant", "content": "Group by Region and Year, sum GrossAfterCb, then compute percentage change. Pandas: df.groupby(['Region','Year'])['GrossAfterCb'].sum().pct_change(). SQL: SELECT Region, EXTRACT(YEAR FROM SaleDate) AS Year, SUM(GrossAfterCb) AS Revenue FROM sales GROUP BY 1,2;"}]}
{"messages": [{"role": "user", "content": "Compute profit margin by MainChannel."}, {"role": "assistant", "content": "Use SUM(Profit)/SUM(GrossAfterCb). Pandas: df.groupby('MainChannel').apply(lambda x: x['Profit'].sum()/x['GrossAfterCb'].sum()). SQL: SELECT MainChannel, SUM(Profit)/SUM(GrossAfterCb) AS ProfitMargin FROM sales GROUP BY MainChannel;"}]}
{"messages": [{"role": "user", "content": "Find average order value."}, {"role": "assistant", "content": "Divide total revenue by number of unique orders. Pandas: df['GrossAfterCb'].sum()/df['OrderUnitKey'].nunique(). SQL: SELECT SUM(GrossAfterCb)/COUNT(DISTINCT OrderUnitKey) FROM sales;"}]}
{"messages": [{"role": "user", "content": "Show quarterly revenue trend."}, {"role": "assistant", "content": "Group by SaleDate quarter, sum GrossAfterCb. Pandas: df.groupby(df['SaleDate'].dt.to_period('Q'))['GrossAfterCb'].sum(). SQL: SELECT DATE_TRUNC('quarter', SaleDate), SUM(GrossAfterCb) FROM sales GROUP BY 1;"}]}
{"messages": [{"role": "user", "content": "Identify underperforming channels."}, {"role": "assistant", "content": "Find channels with revenue below average. Pandas: df.groupby('MainChannel')['GrossAfterCb'].sum().query('GrossAfterCb < GrossAfterCb.mean()'). SQL: SELECT MainChannel, SUM(GrossAfterCb) FROM sales GROUP BY MainChannel HAVING SUM(GrossAfterCb) < (SELECT AVG(SUM(GrossAfterCb)) FROM sales GROUP BY MainChannel);"}]}
{"messages": [{"role": "user", "content": "Find month with highest revenue."}, {"role": "assistant", "content": "Group by month, sum GrossAfterCb, pick the max. Pandas: df.groupby(df['SaleDate'].dt.to_period('M'))['GrossAfterCb'].sum().idxmax(). SQL: SELECT DATE_TRUNC('month', SaleDate), SUM(GrossAfterCb) FROM sales GROUP BY 1 ORDER BY 2 DESC LIMIT 1;"}]}
{"messages": [{"role": "user", "content": "Show monthly revenue by MainChannel."}, {"role": "assistant", "content": "Group by SaleDate (month) and MainChannel, then sum GrossAfterCb. Pandas: df.groupby(['Month','MainChannel'])['GrossAfterCb'].sum().reset_index(). SQL: SELECT DATE_TRUNC('month', SaleDate) AS Month, MainChannel, SUM(GrossAfterCb) FROM sales GROUP BY 1,2;"}]}
{"messages": [{"role": "user", "content": "List top 10 packages with the highest profit."}, {"role": "assistant", "content": "Group by Package and sum Profit, then sort descending and take top 10. Pandas: df.groupby('Package')['Profit'].sum().sort_values(ascending=False).head(10). SQL: SELECT Package, SUM(Profit) AS TotalProfit FROM sales GROUP BY Package ORDER BY TotalProfit DESC LIMIT 10;"}]}
{"messages": [{"role": "user", "content": "Compare revenue between Online and Retail channels."}, {"role": "assistant", "content": "Group by MainChannel and sum GrossAfterCb, then compare totals. Pandas: df.groupby('MainChannel')['GrossAfterCb'].sum(). SQL: SELECT MainChannel, SUM(GrossAfterCb) FROM sales GROUP BY MainChannel;"}]}
{"messages": [{"role": "user", "content": "Calculate year-over-year growth by region."}, {"role": "assistant", "content": "Group by Region and Year, sum GrossAfterCb, then compute percentage change. Pandas: df.groupby(['Region','Year'])['GrossAfterCb'].sum().pct_change(). SQL: SELECT Region, EXTRACT(YEAR FROM SaleDate) AS Year, SUM(GrossAfterCb) AS Revenue FROM sales GROUP BY 1,2;"}]}
{"messages": [{"role": "user", "content": "Compute profit margin by MainChannel."}, {"role": "assistant", "content": "Use SUM(Profit)/SUM(GrossAfterCb). Pandas: df.groupby('MainChannel').apply(lambda x: x['Profit'].sum()/x['GrossAfterCb'].sum()). SQL: SELECT MainChannel, SUM(Profit)/SUM(GrossAfterCb) AS ProfitMargin FROM sales GROUP BY MainChannel;"}]}
{"messages": [{"role": "user", "content": "Find average order value."}, {"role": "assistant", "content": "Divide total revenue by number of unique orders. Pandas: df['GrossAfterCb'].sum()/df['OrderUnitKey'].nunique(). SQL: SELECT SUM(GrossAfterCb)/COUNT(DISTINCT OrderUnitKey) FROM sales;"}]}
{"messages": [{"role": "user", "content": "Show quarterly revenue trend."}, {"role": "assistant", "content": "Group by SaleDate quarter, sum GrossAfterCb. Pandas: df.groupby(df['SaleDate'].dt.to_period('Q'))['GrossAfterCb'].sum(). SQL: SELECT DATE_TRUNC('quarter', SaleDate), SUM(GrossAfterCb) FROM sales GROUP BY 1;"}]}
{"messages": [{"role": "user", "content": "Identify underperforming channels."}, {"role": "assistant", "content": "Find channels with revenue below average. Pandas: df.groupby('MainChannel')['GrossAfterCb'].sum().query('GrossAfterCb < GrossAfterCb.mean()'). SQL: SELECT MainChannel, SUM(GrossAfterCb) FROM sales GROUP BY MainChannel HAVING SUM(GrossAfterCb) < (SELECT AVG(SUM(GrossAfterCb)) FROM sales GROUP BY MainChannel);"}]}
{"messages": [{"role": "user", "content": "Find month with highest revenue."}, {"role": "assistant", "content": "Group by month, sum GrossAfterCb, pick the max. Pandas: df.groupby(df['SaleDate'].dt.to_period('M'))['GrossAfterCb'].sum().idxmax(). SQL: SELECT DATE_TRUNC('month', SaleDate), SUM(GrossAfterCb) FROM sales GROUP BY 1 ORDER BY 2 DESC LIMIT 1;"}]}
{"messages": [{"role": "user", "content": "Show monthly revenue by MainChannel."}, {"role": "assistant", "content": "Group by SaleDate (month) and MainChannel, then sum GrossAfterCb. Pandas: df.groupby(['Month','MainChannel'])['GrossAfterCb'].sum().reset_index(). SQL: SELECT DATE_TRUNC('month', SaleDate) AS Month, MainChannel, SUM(GrossAfterCb) FROM sales GROUP BY 1,2;"}]}
{"messages": [{"role": "user", "content": "List top 10 packages with the highest profit."}, {"role": "assistant", "content": "Group by Package and sum Profit, then sort descending and take top 10. Pandas: df.groupby('Package')['Profit'].sum().sort_values(ascending=False).head(10). SQL: SELECT Package, SUM(Profit) AS TotalProfit FROM sales GROUP BY Package ORDER BY TotalProfit DESC LIMIT 10;"}]}
{"messages": [{"role": "user", "content": "Compare revenue between Online and Retail channels."}, {"role": "assistant", "content": "Group by MainChannel and sum GrossAfterCb, then compare totals. Pandas: df.groupby('MainChannel')['GrossAfterCb'].sum(). SQL: SELECT MainChannel, SUM(GrossAfterCb) FROM sales GROUP BY MainChannel;"}]}
{"messages": [{"role": "user", "content": "Calculate year-over-year growth by region."}, {"role": "assistant", "content": "Group by Region and Year, sum GrossAfterCb, then compute percentage change. Pandas: df.groupby(['Region','Year'])['GrossAfterCb'].sum().pct_change(). SQL: SELECT Region, EXTRACT(YEAR FROM SaleDate) AS Year, SUM(GrossAfterCb) AS Revenue FROM sales GROUP BY 1,2;"}]}
{"messages": [{"role": "user", "content": "Compute profit margin by MainChannel."}, {"role": "assistant", "content": "Use SUM(Profit)/SUM(GrossAfterCb). Pandas: df.groupby('MainChannel').apply(lambda x: x['Profit'].sum()/x['GrossAfterCb'].sum()). SQL: SELECT MainChannel, SUM(Profit)/SUM(GrossAfterCb) AS ProfitMargin FROM sales GROUP BY MainChannel;"}]}
{"messages": [{"role": "user", "content": "Find average order value."}, {"role": "assistant", "content": "Divide total revenue by number of unique orders. Pandas: df['GrossAfterCb'].sum()/df['OrderUnitKey'].nunique(). SQL: SELECT SUM(GrossAfterCb)/COUNT(DISTINCT OrderUnitKey) FROM sales;"}]}
{"messages": [{"role": "user", "content": "Show quarterly revenue trend."}, {"role": "assistant", "content": "Group by SaleDate quarter, sum GrossAfterCb. Pandas: df.groupby(df['SaleDate'].dt.to_period('Q'))['GrossAfterCb'].sum(). SQL: SELECT DATE_TRUNC('quarter', SaleDate), SUM(GrossAfterCb) FROM sales GROUP BY 1;"}]}
{"messages": [{"role": "user", "content": "Identify underperforming channels."}, {"role": "assistant", "content": "Find channels with revenue below average. Pandas: df.groupby('MainChannel')['GrossAfterCb'].sum().query('GrossAfterCb < GrossAfterCb.mean()'). SQL: SELECT MainChannel, SUM(GrossAfterCb) FROM sales GROUP BY MainChannel HAVING SUM(GrossAfterCb) < (SELECT AVG(SUM(GrossAfterCb)) FROM sales GROUP BY MainChannel);"}]}
{"messages": [{"role": "user", "content": "Find month with highest revenue."}, {"role": "assistant", "content": "Group by month, sum GrossAfterCb, pick the max. Pandas: df.groupby(df['SaleDate'].dt.to_period('M'))['GrossAfterCb'].sum().idxmax(). SQL: SELECT DATE_TRUNC('month', SaleDate), SUM(GrossAfterCb) FROM sales GROUP BY 1 ORDER BY 2 DESC LIMIT 1;"}]}
{"messages": [{"role": "user", "content": "Show monthly revenue by MainChannel."}, {"role": "assistant", "content": "Group by SaleDate (month) and MainChannel, then sum GrossAfterCb. Pandas: df.groupby(['Month','MainChannel'])['GrossAfterCb'].sum().reset_index(). SQL: SELECT DATE_TRUNC('month', SaleDate) AS Month, MainChannel, SUM(GrossAfterCb) FROM sales GROUP BY 1,2;"}]}
{"messages": [{"role": "user", "content": "List top 10 packages with the highest profit."}, {"role": "assistant", "content": "Group by Package and sum Profit, then sort descending and take top 10. Pandas: df.groupby('Package')['Profit'].sum().sort_values(ascending=False).head(10). SQL: SELECT Package, SUM(Profit) AS TotalProfit FROM sales GROUP BY Package ORDER BY TotalProfit DESC LIMIT 10;"}]}
{"messages": [{"role": "user", "content": "Compare revenue between Online and Retail channels."}, {"role": "assistant", "content": "Group by MainChannel and sum GrossAfterCb, then compare totals. Pandas: df.groupby('MainChannel')['GrossAfterCb'].sum(). SQL: SELECT MainChannel, SUM(GrossAfterCb) FROM sales GROUP BY MainChannel;"}]}
{"messages": [{"role": "user", "content": "Calculate year-over-year growth by region."}, {"role": "assistant", "content": "Group by Region and Year, sum GrossAfterCb, then compute percentage change. Pandas: df.groupby(['Region','Year'])['GrossAfterCb'].sum().pct_change(). SQL: SELECT Region, EXTRACT(YEAR FROM SaleDate) AS Year, SUM(GrossAfterCb) AS Revenue FROM sales GROUP BY 1,2;"}]}
{"messages": [{"role": "user", "content": "Compute profit margin by MainChannel."}, {"role": "assistant", "content": "Use SUM(Profit)/SUM(GrossAfterCb). Pandas: df.groupby('MainChannel').apply(lambda x: x['Profit'].sum()/x['GrossAfterCb'].sum()). SQL: SELECT MainChannel, SUM(Profit)/SUM(GrossAfterCb) AS ProfitMargin FROM sales GROUP BY MainChannel;"}]}
{"messages": [{"role": "user", "content": "Find average order value."}, {"role": "assistant", "content": "Divide total revenue by number of unique orders. Pandas: df['GrossAfterCb'].sum()/df['OrderUnitKey'].nunique(). SQL: SELECT SUM(GrossAfterCb)/COUNT(DISTINCT OrderUnitKey) FROM sales;"}]}
{"messages": [{"role": "user", "content": "Show quarterly revenue trend."}, {"role": "assistant", "content": "Group by SaleDate quarter, sum GrossAfterCb. Pandas: df.groupby(df['SaleDate'].dt.to_period('Q'))['GrossAfterCb'].sum(). SQL: SELECT DATE_TRUNC('quarter', SaleDate), SUM(GrossAfterCb) FROM sales GROUP BY 1;"}]}
{"messages": [{"role": "user", "content": "Identify underperforming channels."}, {"role": "assistant", "content": "Find channels with revenue below average. Pandas: df.groupby('MainChannel')['GrossAfterCb'].sum().query('GrossAfterCb < GrossAfterCb.mean()'). SQL: SELECT MainChannel, SUM(GrossAfterCb) FROM sales GROUP BY MainChannel HAVING SUM(GrossAfterCb) < (SELECT AVG(SUM(GrossAfterCb)) FROM sales GROUP BY MainChannel);"}]}
{"messages": [{"role": "user", "content": "Find month with highest revenue."}, {"role": "assistant", "content": "Group by month, sum GrossAfterCb, pick the max. Pandas: df.groupby(df['SaleDate'].dt.to_period('M'))['GrossAfterCb'].sum().idxmax(). SQL: SELECT DATE_TRUNC('month', SaleDate), SUM(GrossAfterCb) FROM sales GROUP BY 1 ORDER BY 2 DESC LIMIT 1;"}]}
{"messages": [{"role": "user", "content": "Show monthly revenue by MainChannel."}, {"role": "assistant", "content": "Group by SaleDate (month) and MainChannel, then sum GrossAfterCb. Pandas: df.groupby(['Month','MainChannel'])['GrossAfterCb'].sum().reset_index(). SQL: SELECT DATE_TRUNC('month', SaleDate) AS Month, MainChannel, SUM(GrossAfterCb) FROM sales GROUP BY 1,2;"}]}
{"messages": [{"role": "user", "content": "List top 10 packages with the highest profit."}, {"role": "assistant", "content": "Group by Package and sum Profit, then sort descending and take top 10. Pandas: df.groupby('Package')['Profit'].sum().sort_values(ascending=False).head(10). SQL: SELECT Package, SUM(Profit) AS TotalProfit FROM sales GROUP BY Package ORDER BY TotalProfit DESC LIMIT 10;"}]}
{"messages": [{"role": "user", "content": "Compare revenue between Online and Retail channels."}, {"role": "assistant", "content": "Group by MainChannel and sum GrossAfterCb, then compare totals. Pandas: df.groupby('MainChannel')['GrossAfterCb'].sum(). SQL: SELECT MainChannel, SUM(GrossAfterCb) FROM sales GROUP BY MainChannel;"}]}
{"messages": [{"role": "user", "content": "Calculate year-over-year growth by region."}, {"role": "assistant", "content": "Group by Region and Year, sum GrossAfterCb, then compute percentage change. Pandas: df.groupby(['Region','Year'])['GrossAfterCb'].sum().pct_change(). SQL: SELECT Region, EXTRACT(YEAR FROM SaleDate) AS Year, SUM(GrossAfterCb) AS Revenue FROM sales GROUP BY 1,2;"}]}
{"messages": [{"role": "user", "content": "Compute profit margin by MainChannel."}, {"role": "assistant", "content": "Use SUM(Profit)/SUM(GrossAfterCb). Pandas: df.groupby('MainChannel').apply(lambda x: x['Profit'].sum()/x['GrossAfterCb'].sum()). SQL: SELECT MainChannel, SUM(Profit)/SUM(GrossAfterCb) AS ProfitMargin FROM sales GROUP BY MainChannel;"}]}
{"messages": [{"role": "user", "content": "Find average order value."}, {"role": "assistant", "content": "Divide total revenue by number of unique orders. Pandas: df['GrossAfterCb'].sum()/df['OrderUnitKey'].nunique(). SQL: SELECT SUM(GrossAfterCb)/COUNT(DISTINCT OrderUnitKey) FROM sales;"}]}
{"messages": [{"role": "user", "content": "Show quarterly revenue trend."}, {"role": "assistant", "content": "Group by SaleDate quarter, sum GrossAfterCb. Pandas: df.groupby(df['SaleDate'].dt.to_period('Q'))['GrossAfterCb'].sum(). SQL: SELECT DATE_TRUNC('quarter', SaleDate), SUM(GrossAfterCb) FROM sales GROUP BY 1;"}]}
{"messages": [{"role": "user", "content": "Identify underperforming channels."}, {"role": "assistant", "content": "Find channels with revenue below average. Pandas: df.groupby('MainChannel')['GrossAfterCb'].sum().query('GrossAfterCb < GrossAfterCb.mean()'). SQL: SELECT MainChannel, SUM(GrossAfterCb) FROM sales GROUP BY MainChannel HAVING SUM(GrossAfterCb) < (SELECT AVG(SUM(GrossAfterCb)) FROM sales GROUP BY MainChannel);"}]}
{"messages": [{"role": "user", "content": "Find month with highest revenue."}, {"role": "assistant", "content": "Group by month, sum GrossAfterCb, pick the max. Pandas: df.groupby(df['SaleDate'].dt.to_period('M'))['GrossAfterCb'].sum().idxmax(). SQL: SELECT DATE_TRUNC('month', SaleDate), SUM(GrossAfterCb) FROM sales GROUP BY 1 ORDER BY 2 DESC LIMIT 1;"}]}
{"messages": [{"role": "user", "content": "Show monthly revenue by MainChannel."}, {"role": "assistant", "content": "Group by SaleDate (month) and MainChannel, then sum GrossAfterCb. Pandas: df.groupby(['Month','MainChannel'])['GrossAfterCb'].sum().reset_index(). SQL: SELECT DATE_TRUNC('month', SaleDate) AS Month, MainChannel, SUM(GrossAfterCb) FROM sales GROUP BY 1,2;"}]}
